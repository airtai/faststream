[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "faststream"
description = "FastStream: the simplest way to work with a messaging queues"
readme = "README.md"
authors = [
    { name = "AG2AI", email = "support@ag2.ai" },
    { name = "Nikita Pastukhov", email = "nikita@pastukhov-dev.com" },
]

keywords = [
    "rabbitmq",
    "kafka",
    "framework",
    "nats",
    "redis",
    "message brokers",
]

requires-python = ">=3.9"

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Topic :: System :: Networking",
    "Topic :: System :: Distributed Computing",
    "Typing :: Typed",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 1",
    "Framework :: Pydantic :: 2",
]

dynamic = ["version"]

dependencies = [
    "anyio>=3.7.1,<5",
    "fast-depends[pydantic]>=3.0.0a3,<4.0.0",
    "typing-extensions>=4.8.0",
]

[project.optional-dependencies]
# public distributions
rabbit = ["aio-pika>=9,<10"]

kafka = ["aiokafka>=0.9,<0.13"]

confluent = [
    "confluent-kafka>=2,!=2.8.1,<3; python_version < '3.13'",
    "confluent-kafka>=2.6,!=2.8.1,<3; python_version >= '3.13'",
]

nats = ["nats-py>=2.7.0,<=3.0.0"]

redis = ["redis>=5.0.0,<6.0.0"]

otel = ["opentelemetry-sdk>=1.24.0,<2.0.0"]

cli = [
    "typer>=0.9,!=0.12,<=0.15.2",
    "watchfiles>=0.15.0,<1.1.0"
]

prometheus = ["prometheus-client>=0.20.0,<0.30.0"]

# dev dependencies
optionals = ["faststream[rabbit,kafka,confluent,nats,redis,otel,cli,prometheus]"]

devdocs = [
    "mkdocs-material==9.6.11",
    "mkdocs-static-i18n==1.3.0",
    "mdx-include==1.4.2",
    "mkdocstrings[python]==0.29.1",
    "mkdocstrings[python]==0.26.1; python_version < '3.9'",
    "mkdocs-literate-nav==0.6.2",
    "mkdocs-git-revision-date-localized-plugin==1.4.5",
    "mike==2.1.3",                                      # versioning
    "mkdocs-minify-plugin==0.8.0",
    "mkdocs-macros-plugin==1.3.7",                      # includes with variables
    "mkdocs-glightbox==0.4.0",                          # img zoom
    "pillow",                                           # required for mkdocs-glightbo
    "cairosvg",                                         # required for mkdocs-glightbo
    "requests",                                         # using in CI, do not pin it
]

types = [
    "faststream[optionals]",
    "mypy==1.15.0",
    # mypy extensions
    "types-Deprecated",
    "types-PyYAML",
    "types-setuptools",
    "types-ujson",
    "types-redis",
    "types-Pygments",
    "types-docutils",
    "types-aiofiles",
    "confluent-kafka-stubs; python_version >= '3.11'",
]

lint = [
    "faststream[types]",
    "ruff==0.11.5",
    "bandit==1.8.3",
    "semgrep==1.118.0",
    "codespell==2.4.1",
]

test-core = [
    "coverage[toml]==7.8.0",
    "pytest==8.3.5",
    "pytest-asyncio==0.26.0",
    "dirty-equals==0.9.0",
]

testing = [
    "faststream[test-core]",
    "fastapi==0.115.12",
    "pydantic-settings>=2.0.0,<3.0.0",
    "httpx==0.28.1",
    "PyYAML==6.0.2",
    "email-validator==2.2.0",
]

dev = [
    "faststream[optionals,lint,testing,devdocs]",
    "pre-commit==4.2.0",
    "detect-secrets==1.5.0",
]

[project.urls]
Homepage = "https://faststream.airt.ai/latest/"
Documentation = "https://faststream.airt.ai/latest/getting-started/"
Tracker = "https://github.com/ag2ai/FastStream/issues"
Source = "https://github.com/ag2ai/FastStream"
Discord = "https://discord.gg/qFm6aSqq59"

[project.scripts]
faststream = "faststream.__main__:cli"

[tool.hatch.version]
path = "faststream/__about__.py"

[tool.hatch.build]
skip-excluded-dirs = true
exclude = ["/tests", "/docs"]

[tool.mypy]
files = ["faststream", "tests/mypy"]
strict = true
python_version = "3.9"
ignore_missing_imports = true
plugins = ["pydantic.mypy"]

# from https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = true

disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-q -m 'not slow'"
testpaths = ["tests"]
markers = ["rabbit", "kafka", "confluent", "nats", "redis", "slow", "all"]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
parallel = true
branch = true
concurrency = ["multiprocessing", "thread"]
source = ["docs/docs_src", "examples", "faststream", "tests"]
context = '${CONTEXT}'
omit = ["**/__init__.py", "tests/mypy/*"]

[tool.coverage.report]
show_missing = true
skip_empty = true
exclude_also = [
    "if __name__ == .__main__.:",
    "self.logger",
    "def __repr__",
    "lambda: None",
    "from .*",
    "import .*",
    '@(abc\.)?abstractmethod',
    "raise NotImplementedError",
    'raise AssertionError',
    'logger\..*',
    "pass",
    '\.\.\.',
]
omit = [
    '*/__about__.py',
    '*/__main__.py',
    '*/__init__.py',
    '*/annotations.py',
    'docs/docs_src/getting_started/serialization/avro.py',
    'docs/docs_src/getting_started/serialization/msgpack_ex.py',
    'docs/docs_src/getting_started/serialization/protobuf.py',
    'docs/docs_src/integrations/http_frameworks_integrations/aiohttp.py',
    'docs/docs_src/integrations/http_frameworks_integrations/blacksheep.py',
    'docs/docs_src/integrations/http_frameworks_integrations/falcon.py',
    'docs/docs_src/integrations/http_frameworks_integrations/litestar.py',
    'docs/docs_src/integrations/http_frameworks_integrations/quart.py',
    'docs/docs_src/integrations/http_frameworks_integrations/sanic.py',
    'docs/docs_src/integrations/http_frameworks_integrations/tornado.py',
    'examples/howto/structlogs.py',
    'examples/serialization/avro/avro.py',
    'examples/serialization/msgpack/pack.py',
    'examples/serialization/protobuf/protobuf.py',
]

[tool.bandit]

[tool.codespell]
skip = "./venv*,./docs/site/*,./htmlcov"
ignore-words = ".codespell-whitelist.txt"
